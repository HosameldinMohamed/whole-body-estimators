name: C++ CI Workflow

# template derived from https://github.com/robotology/how-to-export-cpp-library/tree/master/.github/workflows 
# and https://github.com/robotology/idyntree/blob/master/.github/workflows/ci.yml

on:
    push:
    pull_request:
    schedule:
    # run a cron job for a nightly build
    # * is a special character in YAML so you have to quote this string
    # Execute a "nightly" build at 2 AM UTC
    - cron: '0 2 * * *'
    
jobs:
    build:
        name: '[${{matrix.os}}@${{matrix.build_type}}]'
        runs-on: ${{matrix.os}}
        strategy:
            matrix:
                build_type: [Release]
                os: [ubuntu-latest, windows-latest, macOS-latest]  
                
        steps:
        # Clone the repository in $GITHUB_WORKSPACE
        - uses: actions/checkout@master  
        
        # Print the environment variables to simplify development and debugging
        - name: Environment Variables
        # Use bash  in order to have same basic commands in all OSs
          shell: bash
          run: env
          
        # Remove apt repos on Ubuntu that are known to break from time to time 
        # See https://github.com/actions/virtual-environments/issues/323 
        - name: Remove broken apt repos [Ubuntu]
          if: matrix.os == 'ubuntu-latest'
          run: |
            for apt_file in `grep -lr microsoft /etc/apt/sources.list.d/`; do sudo rm $apt_file; done
        
        # ============
        # DEPENDENCIES
        # ============
        - name: Dependencies [Windows]
          if: matrix.os == 'windows-latest'
          run: |
            git clone https://github.com/robotology-dependencies/robotology-vcpkg-binary-ports C:/robotology-vcpkg-binary-ports      
            vcpkg.exe --overlay-ports=C:/robotology-vcpkg-binary-ports install --triplet x64-windows ace assimp libxml2 eigen3 ipopt-binary
               
        - name: Dependencies [macOS]
          if: matrix.os == 'macOS-latest'
          run: |
            brew install ace assimp boost eigen swig qt5 orocos-kdl
             
        - name: Dependencies [Ubuntu]
          if: matrix.os == 'ubuntu-latest'
          run: |
            sudo apt update
            sudo apt install git build-essential cmake libace-dev coinor-libipopt-dev  libboost-system-dev libboost-filesystem-dev \
                             libboost-thread-dev liborocos-kdl-dev libeigen3-dev swig qtbase5-dev qtdeclarative5-dev qtmultimedia5-dev libqt5charts5-dev \
                             libxml2-dev liburdfdom-dev libtinyxml-dev liburdfdom-dev liboctave-dev python-dev valgrind libassimp-dev
                             
        - name: Source-based Dependencies [Windows]
          if: matrix.os == 'windows-latest'
          shell: bash
          run: |
            # YCM
            cd ${GITHUB_WORKSPACE}
            git clone https://github.com/robotology/ycm
            cd ycm
            mkdir -p build
            cd build
            cmake -A x64 -DCMAKE_TOOLCHAIN_FILE=${VCPKG_INSTALLATION_ROOT}/scripts/buildsystems/vcpkg.cmake \
                         -DCMAKE_INSTALL_PREFIX=${GITHUB_WORKSPACE}/install ..
            cmake --build . --config ${{matrix.build_type}} --target INSTALL
             
            # YARP
            cd ${GITHUB_WORKSPACE}
            git clone https://github.com/robotology/yarp
            cd yarp
            mkdir -p build
            cd build
            cmake -A x64 -DCMAKE_TOOLCHAIN_FILE=${VCPKG_INSTALLATION_ROOT}/scripts/buildsystems/vcpkg.cmake \
                         -DCMAKE_PREFIX_PATH=${GITHUB_WORKSPACE}/install \
                         -DCMAKE_INSTALL_PREFIX=${GITHUB_WORKSPACE}/install ..
            cmake --build . --config ${{matrix.build_type}} --target INSTALL
            # Workaround for https://github.com/robotology-dependencies/robotology-vcpkg-binary-ports/issues/3
            export IPOPT_DIR=${VCPKG_INSTALLATION_ROOT}/installed/x64-windows
                          
            # ICUB
            cd ${GITHUB_WORKSPACE}
            git clone https://github.com/robotology/icub-main
            cd icub-main
            mkdir -p build
            cd build
            cmake -A x64 -DCMAKE_TOOLCHAIN_FILE=${VCPKG_INSTALLATION_ROOT}/scripts/buildsystems/vcpkg.cmake \
                         -DCMAKE_PREFIX_PATH=${GITHUB_WORKSPACE}/install \
                         -DCMAKE_BUILD_TPYE=${{matrix.build_type}} \
                         -DCMAKE_INSTALL_PREFIX=${GITHUB_WORKSPACE}/install ..
            cmake --build . --config ${{matrix.build_type}} --target INSTALL
            
            # iDynTree
            cd ${GITHUB_WORKSPACE}
            git clone https://github.com/robotology/iDynTree
            cd iDynTree
            git checkout devel
            mkdir -p build
            cd build
            cmake -A x64 -DCMAKE_TOOLCHAIN_FILE=${VCPKG_INSTALLATION_ROOT}/scripts/buildsystems/vcpkg.cmake \
                         -DCMAKE_PREFIX_PATH=${GITHUB_WORKSPACE}/install \
                         -DCMAKE_BUILD_TPYE=${{matrix.build_type}} \
                         -DIDYNTREE_USES_ICUB_MAIN:BOOL=ON \
                         -DCMAKE_INSTALL_PREFIX=${GITHUB_WORKSPACE}/install ..
            cmake --build . --config ${{matrix.build_type}} --target INSTALL
                           
             
        - name: Source-based Dependencies [Ubuntu/macOS]
          if: matrix.os == 'ubuntu-latest' || matrix.os == 'macOS-latest'
          shell: bash
          run: |
            # YCM
            cd ${GITHUB_WORKSPACE}
            git clone https://github.com/robotology/ycm
            cd ycm
            mkdir -p build
            cd build
            cmake -DCMAKE_INSTALL_PREFIX=${GITHUB_WORKSPACE}/install ..
            cmake --build . --config ${{matrix.build_type}} --target install
             
            # YARP
            cd ${GITHUB_WORKSPACE}
            git clone https://github.com/robotology/yarp
            cd yarp
            mkdir -p build
            cd build
            cmake -DCMAKE_PREFIX_PATH=${GITHUB_WORKSPACE}/install \
                  -DCMAKE_INSTALL_PREFIX=${GITHUB_WORKSPACE}/install ..
            cmake --build . --config ${{matrix.build_type}} --target install
                                                    
            # ICUB
            cd ${GITHUB_WORKSPACE}
            git clone https://github.com/robotology/icub-main
            cd icub-main
            mkdir -p build
            cd build
            cmake -DCMAKE_PREFIX_PATH=${GITHUB_WORKSPACE}/install \
                  -DCMAKE_INSTALL_PREFIX=${GITHUB_WORKSPACE}/install ..
            cmake --build . --config ${{matrix.build_type}} --target install
            
            # iDynTree
            cd ${GITHUB_WORKSPACE}
            git clone https://github.com/robotology/iDynTree
            cd iDynTree
            git checkout devel
            mkdir -p build
            cd build
            cmake -DCMAKE_PREFIX_PATH=${GITHUB_WORKSPACE}/install \
                  -DIDYNTREE_USES_ICUB_MAIN:BOOL=ON \
                  -DCMAKE_INSTALL_PREFIX=${GITHUB_WORKSPACE}/install ..
            cmake --build . --config ${{matrix.build_type}} --target install
              
        # ===================
        # CMAKE-BASED PROJECT
        # ===================
        # We will just configure and build the project now. Further modifications and tests can be added
        # Configure step
        - name: Configure [Windows]
          if: matrix.os == 'windows-latest'
          shell: bash
          run: |
            mkdir -p build
            cd build
            cmake -A x64 -DCMAKE_TOOLCHAIN_FILE=${VCPKG_INSTALLATION_ROOT}/scripts/buildsystems/vcpkg.cmake \
                         -DCMAKE_PREFIX_PATH=${GITHUB_WORKSPACE}/install \
                         -DCMAKE_BUILD_TPYE=${{matrix.build_type}} \
                         -DCMAKE_INSTALL_PREFIX=${GITHUB_WORKSPACE}/install ..
            
        - name: Configure [Ubuntu/macOS]
          if: matrix.os == 'ubuntu-latest' || matrix.os == 'macOS-latest'
          shell: bash
          run: |
            mkdir -p build
            cd build
            cmake -DCMAKE_PREFIX_PATH=${GITHUB_WORKSPACE}/install \
                  -DCMAKE_INSTALL_PREFIX=${GITHUB_WORKSPACE}/install ..
        
        # Build step          
        - name: Build
          shell: bash
          run: |
            cd build
            # Attempt of fix for using YARP idl generators (that link ACE) in Windows 
            # See https://github.com/robotology/idyntree/issues/569
            export PATH=$PATH:${GITHUB_WORKSPACE}/install/bin:${VCPKG_INSTALLATION_ROOT}/install/x64-windows/bin:${VCPKG_INSTALLATION_ROOT}/installed/x64-windows/debug/bin
            cmake --build . --config ${{matrix.build_type}}
            
                    
